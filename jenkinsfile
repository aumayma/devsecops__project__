pipeline {
    agent any
environment {
        SSH_USER = 'oumayma'
        SERVER_IP = '192.168.1.150'
        DOCKER_IMAGE = 'monapp:latest'
        dockerUser = 'oumaymaselmi'  
        dockerPass = '56788776Oumayma@'
        SSH_KEY = 'MY_SSH_KEY'
       

  
    }
    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/aumayma/devsecops__project__.git'
            }
        }

stage('Configure Git') {
    steps {
        script {
            // Configure Git to increase postBuffer size
            sh "git config --global http.postBuffer 524288000"
        }
    }
}
stage('Run Gitleaks') {
            steps {
                script {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                    def result = sh(script: 'gitleaks detect --source . --verbose --redact', returnStatus: true)
                    echo "Gitleaks result: ${result}"
                    if (result != 0) {
                        echo"❌ Des secrets ont été détectés ! Corrige-les avant de pousser le code."
                    }
                }
            }
        }
      }

stage('Build Application') {
    steps {
        sh 'mvn clean package -DskipTests'
    }
}

stage('Build Docker Image') {
    steps {
        sh "docker build -t ${DOCKER_IMAGE} ."
    }
}
stage('Install Detect-secrets') {
            steps {
                script {
                    
                    sh 'pip install --user detect-secrets'
                  

                    
                    
                }
            }
        }
        stage('Scan for Secrets') {
            steps {
                
                sh '/usr/local/bin/detect-secrets scan --all-files'
            }
        }





stage('Login to Docker Hub') {
    steps {
        script { 
            sh "docker login -u ${dockerUser} -p ${dockerPass}"
        }
    }
}
stage('Push to Docker Hub') {
    steps {
        sh "docker tag ${DOCKER_IMAGE} ${dockerUser}/${DOCKER_IMAGE}"
        sh "docker push ${dockerUser}/${DOCKER_IMAGE}"
    }
}

        stage('Connect to Server') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'MY_SSH_KEY', variable: 'SSH_KEY')]) {
                        sh """
                            echo "\$SSH_KEY" | tr -d '\\r' > private_key.pem
                    chmod 600 private_key.pem
                    ssh -i private_key.pem -o StrictHostKeyChecking=no \$SSH_USER@\$SERVER_IP 'echo Connected!'
                    rm -f private_key.pem
                        """
                    }
                }
            }
        }
stage('Stop Old Container') {
    steps {
        sh "ssh ${SSH_USER}@${SERVER_IP} 'docker stop monapp || true && docker rm monapp || true'"
    }
}
stage('Start New Container') {
    steps {
        sh "ssh -i ${SSH_KEY} ${SSH_USER}@${SERVER_IP} 'docker run -d -p 8081:8080 --name monapp ${DOCKER_USER}/monapp:latest'"
    }
}
}


}

