pipeline {
    agent any
environment {
        SSH_USER = 'oumayma'
        SERVER_IP = '192.168.1.150'
        DOCKER_IMAGE = 'monapp:latest'
    }
    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/aumayma/devsecops__project__.git'
            }
        }


stage('Run Gitleaks') {
            steps {
                script {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                    def result = sh(script: 'gitleaks detect --source . --verbose --redact', returnStatus: true)
                    echo "Gitleaks result: ${result}"
                    if (result != 0) {
                        echo"‚ùå Des secrets ont √©t√© d√©tect√©s ! Corrige-les avant de pousser le code."
                    }
                }
            }
        }
      }

stage('Build Application') {
    steps {
        sh 'mvn clean package -DskipTests'
    }
}

stage('Build Docker Image') {
    steps {
        sh "docker build -t ${DOCKER_IMAGE} ."
    }
}

stage('Scan Docker Image with Trivy') {
    steps {
        script {
            def trivyResult = sh(script: "trivy image --no-progress --severity HIGH,CRITICAL monapp:latest", returnStdout: true).trim()
            echo "üìå R√©sultats de l'analyse Trivy :"
            echo trivyResult
            
            // V√©rifier s'il y a des vuln√©rabilit√©s
            if (trivyResult.contains("CRITICAL") || trivyResult.contains("HIGH")) {
                error("üö® Des vuln√©rabilit√©s critiques ont √©t√© d√©tect√©es ! ANNULATION du d√©ploiement.")
            }
        }
    }
}

stage('Login to Docker Hub') {
    steps {
        script {

            def dockerCredentials = credentials('DOCKER_CREDENTIALS')
            def dockerUser = dockerCredentials.split(':')[0]
            def dockerPass = dockerCredentials.split(':')[1]
            sh "docker login -u ${dockerUser} -p ${dockerPass}"
        }
    }
}
stage('Push to Docker Hub') {
    steps {
        sh "docker tag ${DOCKER_IMAGE} ${dockerUser}/${DOCKER_IMAGE}"
        sh "docker push ${dockerUser}/${DOCKER_IMAGE}"
    }
}
stage('Connect to Server') {
    steps {
        sh "ssh -o StrictHostKeyChecking=no ${SSH_USER}@${SERVER_IP} 'echo Connected!'"
    }
}
stage('Stop Old Container') {
    steps {
        sh "ssh ${SSH_USER}@${SERVER_IP} 'docker stop monapp || true && docker rm monapp || true'"
    }
}
stage('Start New Container') {
    steps {
        sh "ssh ${SSH_USER}@${SERVER_IP} 'docker run -d -p 8081:8080 --name monapp ${DOCKER_USER}/monapp:latest'"
    }
}
}

}
