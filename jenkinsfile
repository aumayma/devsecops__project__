pipeline {
    agent any
environment {
        SSH_USER = 'oumayma'
        SERVER_IP = '192.168.1.150'
    }
    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/aumayma/devsecops__project__.git'
            }
        }

stage('Run Gitleaks') {
            steps {
                script {
                    def result = sh(script: 'gitleaks detect --source . --verbose --redact', returnStatus: true)
                    echo "Gitleaks result: ${result}"
                    if (result != 0) {
                        error("‚ùå Des secrets ont √©t√© d√©tect√©s ! Corrige-les avant de pousser le code.")
                    }
                }
            }
        }
              

       
stage('Security Check Before Deployment') {
            steps {
                script {
                    def result = sh(script: 'gitleaks detect --source . --verbose --redact', returnStatus: true)
                    echo "Gitleaks result: ${result}"
                    if (result != 0) {
                        error("üö® Des secrets ont √©t√© d√©tect√©s ! Corrige-les avant de d√©ployer.")
                    }
                }
            }
        }


stage('Build Docker Image') {
    steps {
        sh "docker build -t monapp:latest ."
    }
}
stage('Login to Docker Hub') {
    steps {
        script {

            def dockerCredentials = credentials('DOCKER_CREDENTIALS')
            def dockerUser = dockerCredentials.split(':')[0]
            def dockerPass = dockerCredentials.split(':')[1]
            sh "docker login -u ${dockerUser} -p ${dockerPass}"
        }
    }
}
stage('Push to Docker Hub') {
    steps {
        sh "docker tag monapp:latest ${dockerUser}/monapp:latest"
        sh "docker push ${dockerUser}/monapp:latest"
    }
}
stage('Connect to Server') {
    steps {
        sh "ssh -o StrictHostKeyChecking=no ${SSH_USER}@${SERVER_IP} 'echo Connected!'"
    }
}
stage('Stop Old Container') {
    steps {
        sh "ssh ${SSH_USER}@${SERVER_IP} 'docker stop monapp || true && docker rm monapp || true'"
    }
}
stage('Start New Container') {
     sh "ssh ${SSH_USER}@${SERVER_IP} 'docker run -d -p 8081:8080 --name monapp ${DOCKER_USER}/monapp:latest'"
    }
}
}
}
